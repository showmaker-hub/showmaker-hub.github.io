<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何实现远程控制电脑</title>
      <link href="/note/how-to-connect-remotePC/"/>
      <url>/note/how-to-connect-remotePC/</url>
      
        <content type="html"><![CDATA[<p>　因为最近为期一周实训，需要用到keil5编译器，自己的电脑带上充电器有3.65kg实在是太重了，来回拿不方便，于是昨天晚上想了几种方法，最终找到一种最简单的</p><span id="more"></span><h1 id="设备两种远程连接方式"><a href="#设备两种远程连接方式" class="headerlink" title="设备两种远程连接方式"></a>设备两种远程连接方式</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>　　TCP协议是面向连接的可靠的网络传输层协议。无论是哪一方向另一方发送消息之前都会通过3次握手，建立连接后才能够发送消息。而且消息发送方能够确认消息最终是否准确送达。tcp提供了可靠的字节流服务，通过字节码传输数据。</p><p>　　TCP强制执行数据包排序，并且有一个检查实际通过的消息的方法。所以它更可靠。在吞吐量方面 - 例如，在特定时间内传输的数据量 - 实际上它们大致相同。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>　　UDP协议的无连接的，只要知道ip和端口号就能够发送消息，不需要通过握手，建立连接。而且UDP协议没有确认机制，客户端不知道发送服务端的消息是否发送成功。但是UDP在发送报文中会整个报文发送，既不会拆分，也不会合并。UDP协议发送简单高效，但是相比较而言不是十分可靠。</p><p>　　UDP的优点是延迟较低。因为它不检查订购或确认收到数据包 - 您的程序在到达时收到数据包。没有等待确认。以牺牲可靠性为代价，UDP几乎总能提供比TCP更好的性能。</p><h2 id="两种协议区别"><a href="#两种协议区别" class="headerlink" title="两种协议区别"></a>两种协议区别</h2><p> -TCP基于连接，UDP无连接。</p><p> -TCP对系统资源要求多，UDP对资源要求少。</p><p> -TCP协议是流式协议，UDP是数据报模式。</p><p> -TCP可靠，保证数据传输，UDP可能出现丢包情况。</p><p> -TCP协议保证数据顺序，UDP不保证数据的顺序。</p><h1 id="应用层实现方法"><a href="#应用层实现方法" class="headerlink" title="应用层实现方法"></a>应用层实现方法</h1><h2 id="局域网实现-win家庭版不支持"><a href="#局域网实现-win家庭版不支持" class="headerlink" title="局域网实现(win家庭版不支持)"></a>局域网实现(win家庭版不支持)</h2><p> -首先打开远程控制请求</p><div align="center">    <img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/1.jpg" width="50%" loading="lazy">    </div><p> -确定防火墙已关闭</p><p> -cmd输入ipconfig查看自己ip地址</p><p> -cmd输入mstrc,输入ip和计算机密码即可实现远程桌面</p><blockquote><p>~~连接成功后，你的远程电脑就会立刻进入待机状态，并且丝毫不影响你本地电脑的工作哦</p></blockquote><h2 id="外网实现"><a href="#外网实现" class="headerlink" title="外网实现"></a>外网实现</h2><p>###端口映射<br>  需要做端口映射，原理就是给你的路由器发送一个识别请求，这样才能确认是你发送的数据</p><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>  内网穿透 简单说就是用你的内网服务器绑定一个公网ip，远程PC访问公网ip进行数据交换，小白实现起来过于复杂，推荐用第三方<br>####市面上主流的FRP服务<br>经过比较和测试，整理了下面几家内网穿透服务商供参考：</p><p>-浮居FRP<br>-量子互联<br>-Sakura Frp<br>-花生壳<br>以上四家内网穿透服务商均提供免费节点，付费服务也都比较稳定，适合长期使用。</p><blockquote><p>~~当然，FRP服务商不限于这些，如果你有自己的内网穿透服务商，都可以配置实现远程桌面的功能。</p></blockquote><h4 id="配置端口映射服务"><a href="#配置端口映射服务" class="headerlink" title="配置端口映射服务"></a>配置端口映射服务</h4><p>　　以浮居FRP为例，展示如何通过配置内网穿透服务。<br><img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/2.png" alt="详情" loading="lazy"><br>　　首先，需要选择合适的节点。免费节点一般资源有限，但基本足够使用。所有节点均可以穿透远程桌面服务，因此尽量选择国内节点即可。<br><img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/3.png" alt="详情" loading="lazy"><br>　如上图所示进行配置。其中，“本地端口”应填写第一步记下的远程桌面的端口号。</p><p>　远程端口填写一个10000-19999范围内，顺口好记的端口即可，<strong>一会儿连接时会需要这个端口。</strong></p><p>　绑定域名可填可不填。<br><img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/4.png" alt="详情" loading="lazy"><br>　高级设置无需填写。<br>####下载并配置FRP管理软件<br>如果你使用浮居FRP作为服务商，建议使用koho大神开发的frpmgr软件：</p><p><a href="https://down.frp.cool/client/frpmgr-1.3.2.msi">开发包</a></p><p>__如果你使用了其他服务商提供的端口映射服务，应当使用其他服务商提供的软件__，这里我们仅以浮居FRP作为例子。</p><p><img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/5.png" alt="详情" loading="lazy"><br>选择配置文件，复制配置文件内容，并创建一个配置文件“frp.ini”粘贴进去。</p><p>（如果你不知道该如何修改文件扩展名，请<a href="https://www.baidu.com/">百度</a>。）</p><p>frpmgr 默认安装到：C:\Program Files\FRP，运行该目录下的frpmgr.exe。</p><p><img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/6.png" alt="详情" loading="lazy"><br>点击“新建配置”，打开刚刚创建的配置文件，导入配置。</p><p>然后选中配置，点击“启动”按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/7.png" alt="详情" loading="lazy"></p><p>至此，端口映射配置完毕。frpmgr软件在开机时会自动启动端口映射，因此远程桌面的端口转发会自动生效，无需手动启动。</p><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><p>端口映射配置完成后，接下来测试是否可以正常连接。</p><p>随意选择一台<strong>电脑</strong>或<strong>手机</strong>，作为控制端。</p><blockquote><p>~~手机版软件名为微软远程桌面，图标如下图：</p><div align="left">    <img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/images1/8.png" width="80" loading="lazy">  </div>自行至应用商店或网络下载！</blockquote><h2 id="第三方-方法简单"><a href="#第三方-方法简单" class="headerlink" title="第三方(方法简单)"></a>第三方(方法简单)</h2><h3 id="向日葵远程助手"><a href="#向日葵远程助手" class="headerlink" title="向日葵远程助手"></a>向日葵远程助手</h3><p><a href="https://sunlogin.oray.com/">向日葵官网</a><br> -下载向日葵远程工具，在客户端注册登陆账号，也可以使用绿色版，无需绑定账号</p><p> -电脑打开主界面，可以看到本机的识别码和验证码。</p><p> -记住识别码，并在控制电脑上输入</p><p> -输入后，点击接受连接就可以了，连接成功即可进行远程操作。</p><h3 id="TeamViewer"><a href="#TeamViewer" class="headerlink" title="TeamViewer"></a>TeamViewer</h3><p><a href="https://www.teamviewer.com/">TeamView官网</a>：最成熟的远程软件，具有会议、电话‘远程桌面等多种功能</p><p>　Teamviewer使用UDP作为其主要协议来建立与远程计算机的连接。他们只在UDP失败时才使用TCP<br>  只需要注册一个账户就可以，个人版只能两个设备之前交互</p>]]></content>
      
      
      <categories>
          
          <category> 初意的小笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度网盘下载不限速教程</title>
      <link href="/share/BaiduYunpan/"/>
      <url>/share/BaiduYunpan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本教程仅限于需要下载少量文件，又不想开通SVIP的同学，如果有大量文件下载请去官网开通会员<br>原理：利用开了svip的网盘账户解析出来高速链接，然后记录数据库中提供给你<br>环境：电脑，手机均可<br>需要工具： IDM＋云解析</p></blockquote><p>侵权联系<a href="mailto:&#x63;&#104;&#x75;&#121;&#105;&#54;&#x36;&#54;&#x32;&#x30;&#50;&#49;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#x6d;">&#x63;&#104;&#x75;&#121;&#105;&#54;&#x36;&#54;&#x32;&#x30;&#50;&#49;&#x40;&#49;&#x36;&#51;&#x2e;&#99;&#111;&#x6d;</a></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 初意的小安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 使用笔记</title>
      <link href="/note/how-to-use-markdown/"/>
      <url>/note/how-to-use-markdown/</url>
      
        <content type="html"><![CDATA[<p>想必各位写文章大部分用的都是word，最近因为博客文章发布要用markdown，于是就学习了解了一些语法结构，希望能更好帮助各位了解！</p><span id="more"></span><h2 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h2><h3 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h3><p>Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<a href="%5Bmermaid%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%5D(https://mermaidjs.github.io/)">^1</a></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h3 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h3><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p><h3 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h3><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h3 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h3><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>==标记文本==</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h3 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h3><p>链接: <a href="https://mp.csdn.net/">link</a>.</p><p>图片: <img src="https://cdn.jsdelivr.net/gh/showmaker-hub/cdn@main/avatar.jpg" alt="Alt" loading="lazy"></p><p>带尺寸的图片: ![Alt](<a href="https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg">https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg</a> =30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h3 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h3><p>选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// An highlighted block</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span></code></pre><h3 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h3><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h2 id="特殊格式"><a href="#特殊格式" class="headerlink" title="特殊格式"></a>特殊格式</h2><h3 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h3><p>一个简单的表格是这么创建的：<br>项目     | Value<br>——– | —–<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p><h3 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h3><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h3 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h3><p>一个具有注脚的文本。<a href="%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A">^2</a></p><h3 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h3><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h3 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h3><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h3 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h3><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">gantt</span>        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               <span class="token operator">:</span>done,    des1, 2014-01-06,2014-01-08        进行中               <span class="token operator">:</span>active,  des2, 2014-01-09, 3d        计划一               <span class="token operator">:</span>         des3, after des2, 5d        计划二               <span class="token operator">:</span>         des4, after des3, 5d</code></pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h3 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h3><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：:</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>张三 <span class="token arrow operator">->></span> 李四<span class="token operator">:</span> 你好！李四, 最近怎么样?李四<span class="token arrow operator">-->></span>王五<span class="token operator">:</span> 你最近怎么样，王五？李四<span class="token arrow operator">--x</span> 张三<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">-x</span> 王五<span class="token operator">:</span> 我很好，谢谢!<span class="token keyword">Note right of</span> 王五<span class="token operator">:</span> 李四想了很长时间, 文字太长了&lt;br/>不适合放在一行.李四<span class="token arrow operator">-->></span>张三<span class="token operator">:</span> 打量着王五...张三<span class="token arrow operator">->></span>王五<span class="token operator">:</span> 很好... 王五, 你怎么样?</code></pre><p>这将产生一个流程图。:</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[长方形]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">链接</span> <span class="token arrow operator">--></span></span> B<span class="token text string">((圆))</span>A <span class="token arrow operator">--></span> C<span class="token text string">(圆角长方形)</span>B <span class="token arrow operator">--></span> D<span class="token text string">&#123;菱形&#125;</span>C <span class="token arrow operator">--></span> D</code></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h3 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h3><p>我们依旧会支持flowchart的流程图：</p><pre class="language-mermaid" data-language="mermaid"><code class="language-mermaid">flowchatst=>start<span class="token operator">:</span> 开始e=>end<span class="token operator">:</span> 结束op=>operation<span class="token operator">:</span> 我的操作cond=>condition<span class="token operator">:</span> 确认？st<span class="token arrow operator">-></span>op<span class="token arrow operator">-></span>condcond<span class="token text string">(yes)</span>->econd<span class="token text string">(no)</span>->op</code></pre><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件或者.html文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 初意的小笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鱼与熊掌</title>
      <link href="/essay/life-and-work/"/>
      <url>/essay/life-and-work/</url>
      
        <content type="html"><![CDATA[<blockquote><p>鱼，我所欲也，熊掌亦我所欲也；二者不可得兼，舍鱼而取熊掌者也。 ——孟子《鱼我所欲也》</p></blockquote><p>有时候生活与工作也许就像鱼和熊掌一般，（来自一名没有丝毫工作经验的普通学生感慨），但我仿佛看得到未来某一刻的自己埋头在漫无边际的代码里，抓耳挠腮，捶胸顿足，做着自己并非完全喜欢的工作。</p><span id="more"></span><blockquote><p>诸君，我喜欢有趣的东西。</p></blockquote><p>只有有意思的事情才会更加让人愿意为之付出精力啊。</p><p>考研也几乎大军压境，兵临城下，决战几个月。</p><p>如果失败的话，我大致已经可以预见到未来的自己，谨遵父命，考个公务员又或是教师证，呆坐在办公室或是机房里，过完几十岁的人生。</p><p><img src="https://cdn.jsdelivr.net/gh/YunYouJun/cdn/img/meme/no-work.jpg" alt="工作就输了" loading="lazy"></p><blockquote><p>打工是不可能打工的，这辈子不可能打工的啦！<br>I’m not going to work in my life.</p></blockquote><p>虽然平时总喜欢发着这张表情包，把不工作当作名言挂在嘴边。但是到了未来，终究还是不得不踏上社会的吧，被资本所雇佣，完成些无趣的分割好的碎片任务，赚取着廉薄的薪水并以此维持生活。所谓考研，看起来也不过是在此到来之前的拖延的手段罢了。</p><p>不，这是我为了实现梦想的过程才对。我这样安慰着自己。</p><p>因为专业选定的是物联网，也就是软硬件方面。以后能够找到与之相关的工作或者创业，不就变得有趣得多了？</p><p>把有趣的生活当作工作不就鱼与熊掌二者得兼了么？</p><p>脑海里不禁冒出了个曾经看过的一个有趣的问题：</p><blockquote><p>您喜欢吃咖喱味的大便，还是大便味的咖喱？</p></blockquote><p>稍微有些让人难以回答，兴趣和工作搅合在一起会不会也是这样的结果呢？</p><blockquote><p>把工作当作兴趣，还是把兴趣作为工作。</p></blockquote><blockquote><p>鱼味的熊掌，和熊掌味的鱼，哪个好吃？</p></blockquote><p>当然也可能最终混合的四不像，但是麋鹿不也是种很有趣的生物么？</p><p>所以我的答案就是，如果能把它做的与我喜好的味道完全一致，并且没什么危害副作用的话，就算是大便我也吃给你看啊!</p><blockquote><p>话说，被人类喜欢的大便还少吗。粪便里提取的吲哚稀释 n 倍是茉莉花的香味，鲸的便-龙涎香，以及各种带‘砂’字的知名中药啦。</p></blockquote><p>小时候看过《星际宝贝》的一集故事，人名早已忘了大半。</p><blockquote><p>大致内容则是反派们研制出的一个实验品的能力是将被其光波射到的人变成度假的状态。将世界上所有的人都变成度假状态，就可以轻而易举地使得这个世界瘫痪而就此毁灭。</p></blockquote><blockquote><p>主角们则想办法挽救这一结果，但是在阻止试验品方法推导出之前，主角们也都被光波击中了。所有人都陷入了度假的狂欢。但主角的一个朋友却还在推导计算着解决问题的方法，并成功解决了这次危机。</p></blockquote><blockquote><p>大家疑惑不解，她则给出了回答，对我来说，计算这些就是在度假。</p></blockquote><p>那时候，我想我是既敬佩又感到有些同情这类人的。敬佩的是世界上正因有了这些人才能不断前进吧，而同情的是他们却没能去享受那些更为有趣的东西。</p><p>但现在看来，对于这类人来说，自己喜欢的研究本来就是有趣的吧。每个人都有自己的价值评判体系，不同的喜好、不同的品味。有人喜欢吃西红柿，有人喜欢摇滚重金属，而对于其他人却很可能弃之如敝履。美食、电影、音乐、乃至工作也是如此。</p><p>最近 AI 的火热，使得一些报道担忧着人类的职业命运，失业人口增加，而由此创造出的新工作机会数量远远小于淘汰的工作机会。但我仍然认为只是一个很好的趋势，进步的趋势，越是容易被淘汰的，越是那些无趣的工作，不是么？社会就是需要这样不断的进步，直到有一天物质财富极大丰富（<del>实现共产主义社会！</del>），那么每个人都可以去做自己喜欢的事情。</p><p>当然，我不是指那些穷奢极欲啦，做人总要有些什么追求的吧。程序员可以写自己喜欢的并且想要去写的那些开源项目，而不用绞尽脑汁地完成公司布置的碎片人物。设计师可以自由地构建自己认为美好有趣的空想世界，而不用应付恼人的甲方。每个人都独特地承担自己的责任，却又不会为之感到厌烦。无趣重复的事情就交给流水线上的机器与程序好了。这才是未来世界（<del>共产主义社会</del>）该有的样子才对啊！</p><p>顺带一提，鱼和熊掌的话我大概都不喜欢吃。（<del>谁管你啊！摔！</del>）</p><blockquote><p>这是无可奈何的事情。<br><a href="https://movie.douban.com/subject/1764472/">《最終兵器彼女》</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 初意的小随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 中传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何从零开始搭建一个属于自己的网站</title>
      <link href="/share/how-to-build-your-site/"/>
      <url>/share/how-to-build-your-site/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写给想要拥有一个自己的网站但没有资金成本的小白与曾经的自己。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽说是网站，对于个人来说，或许一般叫作博客。<br>但我不希望它仅仅是一个博客，而是能够成为一个处于自己现实生活之外、自由、实验、不用畏惧他人眼光甚至可以独断专行的地方。</p><span id="more"></span><p>当然，这本质还是一个新手向教程，也许会有点科普的感觉。<br>我会从整体上对搭建网站的流程和使用到的技术及步骤进行介绍（因为要铺开讲，倘若包括轶事，实在太多太杂，我也会点到为止），并让你明白这个东西在网站的过程中起到什么样的作用。<br>但我不会就细枝末节展开叙述，譬如如何注册账号、安装时如何点击下一步。<br>我希望看完此篇文章后，此前对此方面知识一无所知的小白，到最后也能搭建出一个属于自己的站点。（前提是认识基础的英语单词和善用搜索引擎）</p><p>已经有所基础的同学大可跳读或者直接关闭。</p><blockquote><p>注释处多为相关补充说明，对正常流程没有影响，若没有兴趣，可以略过。</p></blockquote><p>与文章相关疑问都可在本文章的 GitHub Issues 中进行评论，其他疑问可到对应项目或文章下评论。</p><p>我会尽可能保持更新该文章所使用到的技术和做法，并随时接受勘误。</p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><ul><li>Hexo</li><li>静态博客</li><li>无服务器</li><li>GitHub Pages</li><li><a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun</a></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><blockquote><p><strong>什么是 Node.js ？</strong><br>这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）<br>在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。<br><a href="https://baike.baidu.com/item/node.js/7567977">Node.js | 百度百科</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN</a></p></blockquote><p><a href="https://nodejs.org/zh-cn/">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>Windows 打开命令提示符，macOS 打开终端。（= =，这个不会就请百度吧。）<br>Linux 用户右上角关闭本标签页。</p><p>后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入 <code>node --version</code>，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><blockquote><p>Node.js 安装成功时也默认安装了 <code>npm</code>，在此后将会用到。<br><code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。</p></blockquote><p>对了，国内使用 npm 可能很慢。</p><p><strong>你可以考虑切换为 <code>taobao</code> 镜像源。</strong></p><pre class="language-sh" data-language="sh"><code class="language-sh">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><blockquote><p><a href="https://www.yuque.com/yunyoujun/notes/npm-and-yarn#nrm">npm &amp; yarn 常用包与命令</a></p></blockquote><hr><blockquote><p><a href="https://www.yarnpkg.com/zh-Hans/">yarn</a> 是 Facebook 出品的另一个包管理工具，同样可以管理 npm 中的包，安装已缓存的包时速度更快，你也可以使用它来替代 npm。</p></blockquote><p><a href="https://classic.yarnpkg.com/zh-Hans/docs/install#mac-stable">官网</a>下载或通过命令行安装。</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm install -g yarn</code></pre><h3 id="Git-与-GitHub"><a href="#Git-与-GitHub" class="headerlink" title="Git 与 GitHub"></a>Git 与 GitHub</h3><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><blockquote><p>Visual Studio Code，简称 VS Code。<br>目前最为强大易用的编辑器，轻量且快速。（<del>宇宙第一编辑器</del>）<br>注意：它并不是我们常常听到的 VS，VS 常常指的是 Visual Studio，是一个功能强大的 IDE（集成开发环境），体积也相比 VS Code 都要大上一个量级。</p></blockquote><p>在此之前，我建议你先安装 <a href="https://code.visualstudio.com/">VS Code</a>。因为安装 Git Bash 时，可以设置 VS Code 作为默认编辑器。</p><blockquote><p>Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>（当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/">Git LFS</a>。）</p></blockquote><p>下载 <a href="https://git-scm.com/">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html">这里</a>）</p><p>macOS 用户可以下载官网的安装包进行安装，也可以直接安装 App Store 的 Xcode（附带会安装 Git，但是比较大）。</p><blockquote><p>类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><h4 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h4><p>这一部分内容，你也可以放到本地调试并预览成功后并打算线上部署的时候，再回过头来看。</p><blockquote><p>GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><p>注册 <a href="https://github.com/">GitHub</a> 账号。（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><p>登录 GitHub。</p><blockquote><p>为什么要用 GitHub？<br>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://pages.github.com/">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p></blockquote><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。</p><p><img src="https://i.loli.net/2020/03/05/pDZtlgQsLTb9k13.png" alt="QQ20200305-221806@2x.png" loading="lazy"></p><blockquote><p>我这里因为已经有同名仓库，所以提示了重复。</p></blockquote><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><blockquote><p>为什么必须这个作为仓库名？<br>GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><p>点击 <code>Create repository</code>。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p><a href="https://hexo.io/">Hexo</a></p><ul><li>GitHub: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><blockquote><p><strong>为嘛使用 Hexo ？</strong><br>Hexo 是一个快速、简洁而强大的博客框架，基于 Node.js，同样托管于 GitHub 之上。生态中拥有众多插件主题。你可以基于它快速生成一些静态页面。<br>你可以使用别人的各种主题与插件，也可以自己定制开发想要的功能。<br><strong>为什么不是…?</strong><br>其他常用的博客框架还有 <a href="https://wordpress.org/">WordPress</a>，<a href="https://typecho.org/">Typecho</a>，<a href="https://ghost.org/">Ghost</a> 等，但这些往往都需要购置自己的服务器，而无法静态化地部署到 GitHub Pages 上。（当然，相应的功能和灵活性也大大提升。）静态化站点还有一个优势就是访问速度往往更快。<br>静态网站生成器还有 <a href="https://vuepress.vuejs.org/">Vuepress</a>，<a href="https://www.gatsbyjs.org/">Gatsby</a> 等。但这些多是为了写文档而量身定制的，你也可以使用它们，但是相较 Hexo 的博客定位，它们关于博客的插件和主题以及解决办法会少得多。<br>Hexo 提供的功能与 <a href="https://gohugo.io/">Hugo</a> 几乎都有，（生成大量文件时，甚至比 Hexo 更快）不过它是基于 GO 语言。日后你想对自己的网站进行自定义，即便是 Hugo，你编写前端的交互仍旧需要使用 JavaScript，所以选择基于 JavaScript 的 Hexo 可以降低学习成本。（你若对 GO 有兴趣，仍然可以尝试使用 Hugo，但本教程将不会针对 Hugo 进行展开。）<br>所以对于新手来说，使用 Hexo 作为起始点，不失为一个好选择。（当然如果你有钱租服务器，并希望快速上手的话，就可以考虑考虑 WordPress 或者 Typecho）<br>这里顺带推荐一下小伙伴 <a href="https://asuhe.jp/">染川瞳</a> 的 WordPress 主题 <a href="https://github.com/mirai-mamori/Sakurairo">Sakurairo</a>，<a href="https://guhub.cn/">阔落</a> 的 Typecho 主题 <a href="https://github.com/BigCoke233/miracles">miracles</a>，都是很漂亮的主题。</p></blockquote><p>在终端中输入以下命令：</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g</code></pre><blockquote><p><code>install</code> 自然是安装。<br><code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>此时，请先通过 <code>cd</code> 进入你本地电脑打算存储网站代码的文件夹目录。（或者右键文件夹 Git Bash Here）</p><blockquote><p><a href="https://baike.baidu.com/item/cd/3516393">cd | DOS 命令</a><br><a href="https://baike.baidu.com/item/cd/3516411">cd （LINUXSHELL 命令）</a></p></blockquote><p>譬如：</p><blockquote><p>注意：这里是你自定义的目录，请不要复制粘贴</p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh"># &#39;#&#39; 字符后的文字代表注释，不需要输入# Windowscd C:\Users\YunYou\Documents\GitHub\# macOS# cd &#x2F;Users&#x2F;yunyou&#x2F;github&#x2F;</code></pre><p>接下来输入：</p><pre class="language-sh" data-language="sh"><code class="language-sh">hexo init 你的名字.github.io</code></pre><blockquote><p><code>hexo</code> 正是因为我们之前安装了 <code>hexo-cli</code> 这一个包，所以我们可以在终端中使用 <code>hexo</code> 这一命令。<br><code>init</code> 初始化博客的模版文件。后面跟的是你要新建的文件夹，最好和你此前新建的仓库名一致。</p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh"># 进入你的博客文件夹cd 你的名字.github.io# 默认安装所有 &#96;package.json&#96; 文件中提到的包npm install# 你也可以缩写成 hexo shexo server</code></pre><p><code>server</code> 代表开启本地的 Hexo 服务器，这时你就可以打开浏览器，在地址栏中输入 <code>localhost:4000</code> 就可以看到本地的网页了。</p><p>按 <code>Ctrl + C</code> 中断服务器的运行。</p><p>至此，基础的模版页面便已经搭建好了。</p><h4 id="使用-Hexo-主题"><a href="#使用-Hexo-主题" class="headerlink" title="使用 Hexo 主题"></a>使用 Hexo 主题</h4><p>Hexo 默认提供的是 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题。<br>默认主题样式简单，功能较少。所以大多数人并不会使用默认主题。</p><p>这里将示范如何使用我自己开发的主题 <a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun</a>。</p><p><a href="https://github.com/YunYouJun/hexo-theme-yun"><img src="https://img.shields.io/github/stars/YunYouJun/hexo-theme-yun?style=social" alt="GitHub stars" loading="lazy"></a></p><blockquote><p>_(:з」∠)_ 顺带求 Star，代表收藏，就在点进链接后的右上角。</p></blockquote><p>你可以前往 <a href="https://www.yunyoujun.cn/">云游君的小站</a> 查看示例效果。</p><p>Hexo-Theme-Yun 的速度检测</p><p><img src="https://i.loli.net/2020/03/12/cUIuDPJfo379ZOk.png" alt="pagespeed-insights-score.png" loading="lazy"><em>谷歌 <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a></em></p><p><img src="https://i.loli.net/2020/03/08/DhfLu5yngb7NZE2.png" alt="Audits - Lighthouse" loading="lazy"><em>谷歌浏览器 Audits - Lighthouse 检测分数</em></p><p>当然，你也可以在 <a href="https://hexo.io/themes/">Themes | Hexo</a> 发现更多有趣美丽的主题。使用方法大致相同。<br>当你具备一定开发能力时，你可以开发属于自己的主题，或者为 hexo-theme-yun 提交 <a href="https://github.com/YunYouJun/hexo-theme-yun/pulls">PR</a> 添加你想要的功能。</p><ul><li><a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun - GitHub</a></li><li><a href="https://yun.yunyoujun.cn/">hexo-theme-yun 使用文档</a>：更详细的配置进阶指南。</li><li><a href="https://www.yunyoujun.cn/">示例效果</a></li></ul><h5 id="下载-Hexo-主题"><a href="#下载-Hexo-主题" class="headerlink" title="下载 Hexo 主题"></a>下载 Hexo 主题</h5><p>进入终端（确保路径处于你此前使用 Hexo 初始化好的文件夹目录下，即 <code>xxx.github.io</code>，后简称为 <code>Hexo 目录</code>），输入以下命令。</p><blockquote><p>实际上你也可以直接在 VS Code 中使用终端。</p></blockquote><pre class="language-sh" data-language="sh"><code class="language-sh">git clone https:&#x2F;&#x2F;github.com&#x2F;YunYouJun&#x2F;hexo-theme-yun themes&#x2F;yun</code></pre><blockquote><p>这里便使用到了我们此前安装的 Git，<code>git clone</code> 即代表克隆（也就是复制的作用）我的主题（托管于 GitHub，链接便是主题所在的地址），<code>themes/yun</code> 则代表放在你 Hexo 文件夹下的 <code>themes/yun</code> 文件夹里（没有该文件夹会自动新建）。</p></blockquote><h5 id="编辑-Hexo-配置"><a href="#编辑-Hexo-配置" class="headerlink" title="编辑 Hexo 配置"></a>编辑 Hexo 配置</h5><blockquote><p>右键文件夹使用 VS Code 打开，或者进入 VS Code 打开你存储网站的文件夹。此后操作都将默认你已处于该工作目录下。</p></blockquote><p>在你此前通过 Hexo 初始化生成的文件目录下，会存在一个 <code>_config.yml</code> 文件。</p><blockquote><p><code>yml</code> 是 <a href="https://baike.baidu.com/item/YAML/1067697">YAML</a> 文件的后缀名，YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言） 的缩写，但它实际上还是一种标记语言。你可以将其理解为存储数据的一种文本格式，这也是其诞生的目的。 如果你听说过 JSON，那你就更能明白它是干什么的了。</p></blockquote><p>它是 Hexo 的配置文件，关于各配置选项的意义你可以查看 <a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>。</p><p>在 <code>_config.yml</code> 中找到 <code>theme</code> 这个字段，将其后的 <code>landscape</code> 修改为 <code>yun</code>。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> yun</code></pre><blockquote><p>pug 是一种模板引擎，可以渲染为 HTML 字符串。类似的还有 ejs，swig 等，语法和设计理念有所不同。<br>stylus 是一种 CSS 预处理器，可以渲染为 CSS。类似的还有 scss，less，同样只是语法和设计理念有所差异。</p></blockquote><p>由于我的主题使用了 pug 和 stylus，而 Hexo 自带的一般是 ejs 与 stylus，所以你可能还需要输入以下命令安装渲染器。</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-render-pug hexo-renderer-stylus# 如果出问题，可以换 yarn 安装试试。</code></pre><p>这时再像此前那般使用 <code>hexo server</code> 重新启动服务器，你就可以看到一个不一样的主题风格的页面了。</p><h5 id="自定义主题配置"><a href="#自定义主题配置" class="headerlink" title="自定义主题配置"></a>自定义主题配置</h5><p>当启动时，会使用主题的默认配置。但这不一定是你想要的。<br>所以你可以对主题进行一些自定义。</p><p>主题的配置文件放在 <code>themes/yun/_config.yml</code> 文件中。<br>且慢，你<strong>最好不要直接修改主题的默认配置</strong>。倘若日后主题升级更新了怎么办，难道还要重新配置一遍吗？</p><p>最好的解决方案就是在博客根目录下（不是主题目录）新建 <code>source/_data/yun.yml</code>。（若 <code>source/_data</code> 目录不存在，请新建）</p><p>本主题将自定义配置与默认配置进行合并，因此你只需要在 <code>yun.yml</code> 文件中自定义你需要的配置即可，其余仍将自动采用默认配置。</p><p>譬如我们需要更换头像。在 <code>yun.yml</code> 中填写。</p><blockquote><p>你可以在 <code>source</code> 文件夹下新建 <code>images</code> 文件夹，用来存储你的图片。<br>也可以使用 <a href="https://sm.ms/">SM.MS</a> 等图床工具配合 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 上传你的图片文件，获取在线链接。</p></blockquote><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">avatar</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.jpg <span class="token comment"># 你的头像图片地址</span>  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><p>更换主题色彩，比如换成黑色，黑色的十六进制颜色代码是 <code>#000000</code>。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">colors</span><span class="token punctuation">:</span>  <span class="token key atrule">primary</span><span class="token punctuation">:</span> <span class="token string">"#000000"</span></code></pre><p>这时你的主题色调就会变为黑色。</p><p>这只是一个配置项的简单示例，更多配置你可以参考 <a href="https://yun.yunyoujun.cn/">Yun 主题文档</a> 或直接在 <code>theme/yun/_config.yml</code> 中查看，并根据自己的需要进行配置。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>至今我们的工作都是在本地进行，想必你也很想放到线上与小伙伴们分享。<br>这便轮到了 GitHub Pages 的出场，不过 GitHub Pages 只支持纯静态文件。</p><p>所以我们需要使用以下命令先来生成站点的静态文件。</p><pre class="language-sh" data-language="sh"><code class="language-sh"># 如果进行多次生成，为了避免受错误缓存影响，最好使用 hexo clean 先清除一遍。hexo generate# 缩写为 hexo g</code></pre><p>此时你的文件夹目录下会出现 <code>public</code> 这个文件夹，里面存放的就是你站点的静态文件。</p><h3 id="与远程仓库建立关联"><a href="#与远程仓库建立关联" class="headerlink" title="与远程仓库建立关联"></a>与远程仓库建立关联</h3><p>接下来我们将本地的仓库与此前在 GitHub 上建立的仓库建立关联。</p><pre class="language-sh" data-language="sh"><code class="language-sh">git init # 初始化 Git 仓库，只需要执行一次即可</code></pre><p>在将其部署到 GitHub Pages 上之前，我们最好先建立一个分支。</p><blockquote><p>什么是分支？<br>Git 提供了版本管理功能，其中还有一个分支功能，你现在可以简单地将其理解为平行世界。</p></blockquote><p><code>你的名字.github.io</code> 部署后，GitHub Pages 将默认使用你的 master 分支作为静态文件部署。<br>所以我们最好新建一个 hexo 分支（命名无所谓）用来存储 Hexo 地源代码，master 分支则用来存储部署后的静态文件。</p><pre class="language-sh" data-language="sh"><code class="language-sh">git checkout -b hexo</code></pre><p>这时便成功建立了一个 hexo 分支。（此后的工作都将在 hexo 分支下进行）</p><p>你可以通过 <code>git branch -v</code> 来查看当前有哪些分支，使用 <code>git checkout 分支名</code> 来切换到对应的分支。</p><blockquote><p><a href="https://www.yunyoujun.cn/note/git-learn-note/">Git 学习笔记</a></p></blockquote><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>为了更方便的部署到 GitHub Pages，Hexo 提供了 <code>hexo-deployer-git</code> 插件。</p><p>老规矩，安装。</p><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git</code></pre><p>在 <code>_config.yml</code> 中配置。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 你此前新建的仓库的链接 <span class="token comment"># 比如：https://github.com/YunYouJun/yunyoujun.github.io</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master <span class="token comment"># 默认使用 master 分支</span>  <span class="token key atrule">message</span><span class="token punctuation">:</span> Update Hexo Static Content <span class="token comment"># 你可以自定义此次部署更新的说明</span></code></pre><p>保存，部署！</p><blockquote><p>第一次可能需要你输入用户名与密码。<br>密码输入的时候不会出现 ***，不要害怕，已经输入进去了。</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash">hexo deploy</code></pre><p>等待完成后，打开网址 <code>https://你的名字.github.io</code> 就能看到你的线上网站了。</p><blockquote><p>使用 https，http 可能无法正常打开。HTTPS 是多了安全加密的 HTTP，Chrome 浏览器已经默认会显示 <code>http</code> 链接为不安全。<br>为了安全，建议开启强制 https 跳转。<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Enforce HTTPS</code>。（翻到下面）<br>此时，http 网址会自动重定向到 https</p></blockquote><h3 id="备份与自动部署"><a href="#备份与自动部署" class="headerlink" title="备份与自动部署"></a>备份与自动部署</h3><p>我们当前只是将生成的静态文件部署到了云端。</p><p>为了以防万一，我们应该将网站的源代码文件也推送到 GitHub 仓库备份。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 与远程 Git 仓库建立连接，只此一次即可</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/你的用户名/你的名字.github.io</code></pre><p>接下来准备提交，这几句命令将是你以后每次备份所需要输入。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加到缓存区</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token function">git</span> commit -m <span class="token string">"这次做了什么更改，简单描述下即可"</span><span class="token comment"># 推送至远程仓库</span><span class="token function">git</span> push<span class="token comment"># 第一次提交，你可能需设置一下默认提交分支</span><span class="token comment"># git push --set-upstream origin hexo</span></code></pre><p>每次推送都要输入这三条命令，你可能觉得有些麻烦。<br>那么你可以编写 bash 脚本。</p><p>譬如，在根目录下新建 <code>update.sh</code>。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果没有消息后缀，默认提交信息为 `:pencil: update content`</span><span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token string">"<span class="token variable">$info</span>"</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span> <span class="token assign-left variable">info</span><span class="token operator">=</span><span class="token string">":pencil: update content"</span><span class="token keyword">fi</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token function">git</span> commit -m <span class="token string">"<span class="token variable">$info</span>"</span><span class="token function">git</span> push origin hexo</code></pre><p>此后更新的话，只需要在终端执行 <code>sh update.sh</code> 即可。</p><p>更新麻烦，每次部署也很麻烦，可以使用持续集成进行自动部署。</p><blockquote><p>什么是持续集成？<br>持续集成是一种软件开发实践。对软件进行自动化构建，以此来发现错误。<br>Travis CI 就是一个线上持续集成服务的提供商。它可以拉取你每次推送到 GitHub 上的代码，然后根据你的要求对其进行构建。<br>我们可以趁机让它自动生成网站静态文件，然后自动帮我们部署。<br>除此之外，你还可以使用 <a href="https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions">GitHub Actions</a> ，<a href="https://www.netlify.com/">Netlify</a> 等服务。<br>GitHub Actions 相比 Travis 等，自身便拥有仓库的 Token，不再需要额外设置，可以直接使用 <code>secrets.GITHUB_TOKEN</code>。<br>推荐一个专门用来部署 gh-pages 的 Actions <a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages</a></p></blockquote><p>关于更多更具体的自动化部署方案和操作步骤，你可以参考我的小伙伴 ChrAlpha 的 <a href="https://blog.ichr.me/post/automated-deployment-of-serverless-static-blog/">初探无后端静态博客自动化部署方案</a>。</p><p>他在文章中详细介绍了 Netlify 、GitHub Actions 和 Travis CI 的部署方法。</p><p>你也可以参考 Hexo 的官方文档 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a></p><p>我就不在此画蛇添足。</p><hr><p>当然还有个更简便的方法，直接参考我的 <a href="https://github.com/YunYouJun/yunyoujun.github.io/blob/hexo/.github/workflows/gh-pages.yml">gh-pages.yml</a>。</p><p>去掉夹在 <code>yarn install</code> 与 <code>yarn build</code> 之间的 <code>algolia</code> 部分，直接粘贴到你的 <code>.github/workflows/</code> 文件夹（自己新建）下 <code>xxx.yml</code> 文件里即可。</p><p>推送后便可直接自动部署。</p><p>至此，你的站点便基本搭建完成，此后继续对主题进行自定义吧。</p><blockquote><p><a href="https://yun.yunyoujun.cn/">Yun 主题文档</a></p></blockquote><h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><p>输入以下命令即可新建 <code>xxx.md</code> 文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new post xxx</code></pre><blockquote><p><code>md</code> 是 <code>Markdown</code> 的后缀名，是一种简洁方便的文本标记语言。你只需要记住简单的几种语法，就可以快速进行编写。<br>为什么使用 Markdown？<br>首先 Hexo 本身就是将 Markdown 转化为静态的 Html 文件，来方便用户编写文章。<br>Markdown 就好似介于 Word 与 TXT 文本之间。Word 体积大、大部分功能实际上根本用不到，且最后的文档常常带有许多冗余信息。<br>而 TXT 却无法实现加粗、标题、下划线、水平分割线等常用的功能。<br>（这里所说的 TXT 只是一种纯文本格式的代称，实际上 Markdown 也是纯文本文件，不过通过语法和 Markdown 编译器，我们就可以看到一些简单的样式。）</p></blockquote><p>譬如本文就是通过 Markdown 编写。</p><pre class="language-md" data-language="md"><code class="language-md"># 一级标题## 二级标题**加粗文字**</code></pre><blockquote><p>更多语法（虽然说是更多，但是其实也没多少）：<a href="https://github.com/younghz/Markdown">Markdown 基本语法</a></p></blockquote><p>这是我写的一个 Markdown 样式：<a href="https://www.yunyoujun.cn/star-markdown-css/">star-markdown-css</a></p><p>上面是渲染过后的效果，你可以与其 Markdown 的<a href="https://raw.githubusercontent.com/YunYouJun/star-markdown-css/master/demo/md/demo.md">纯文本原文</a>进行对比。</p><h5 id="添加标签-分类"><a href="#添加标签-分类" class="headerlink" title="添加标签/分类"></a>添加标签/分类</h5><p>例如本文 Markdown 的头部。</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/front-matter.html">Front-matter</a></p></blockquote><pre class="language-md" data-language="md"><code class="language-md">---title: 教你如何从零开始搭建一个属于自己的网站date: 2020-03-05 01:31:08updated: 2020-07-14 16:31:00tags:  - 教程  - Hexo  - 分享categories:  - 云游的小安利---你的文章内容</code></pre><h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p>你可以新建一些自己的自定义页面。</p><p>譬如直接在 Hexo 目录下的 <code>source</code> 文件夹下直接新建 HTML 进行编写。</p><p>也可以通过以下命令来新建页面。（当然还是 Markdown，不过也是可以在 Markdown 里写 HTML 的，也会被渲染出来。）</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo new page xxx</code></pre><p>说到这里，就不得不提一提本主题的特色功能了。</p><p>生成你的老婆列表页面。按一定格式书写即可。见<a href="https://yun.yunyoujun.cn/guide/page.html#girls">文档</a>。</p><blockquote><p>预览：<a href="https://www.yunyoujun.cn/girls/">Lovely Girls</a></p></blockquote><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="视频？"><a href="#视频？" class="headerlink" title="视频？"></a>视频？</h3><p>没有视频，一是懒，二是文字更利于更新勘误。</p><p>以及文章中将会频繁出现参考链接，更方便使用。</p><h3 id="如何绑定你的自定义域名？"><a href="#如何绑定你的自定义域名？" class="headerlink" title="如何绑定你的自定义域名？"></a>如何绑定你的自定义域名？</h3><p>首先，你得有个自己的域名。</p><blockquote><p>避免广告嫌疑，你可以自行前往相关域名提供商购买。<br><del>但是如果你有幸能看到谷歌广告（概率较小），可以考虑点一点。</del></p></blockquote><!-- > 原本我的确是这么写的。> 不过咱的确一直嫖的是[腾讯云](https://cloud.tencent.com/act/cps/redirect?redirect=1040&cps_key=598123cb511ac35c74d38b5a49392812&from=console)，而它又有一个[推广链接](https://cloud.tencent.com/act/cps/redirect?redirect=1040&cps_key=598123cb511ac35c74d38b5a49392812&from=console)。> 而你通过我这个[链接](https://cloud.tencent.com/act/cps/redirect?redirect=1040&cps_key=598123cb511ac35c74d38b5a49392812&from=console)访问腾讯云注册购买产品，也不会多花钱。所以就不妨[点一下](https://cloud.tencent.com/act/cps/redirect?redirect=1040&cps_key=598123cb511ac35c74d38b5a49392812&from=console)？> 「你看，很简单吧，谁都不会受伤的世界完成了。」——比企谷八幡 --><p>并使用 CNAME 解析到 <code>你的名字.github.io</code>。（当然 A 记录直接解析到 GitHub Pages IP 地址也可以。）</p><blockquote><p><a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Managing a custom domain for your GitHub Pages site</a></p></blockquote><p>在 <code>Hexo</code> 工作目录下 <code>source</code> 文件夹下新建 <code>CNAME</code> 文件（没有后缀名）。</p><blockquote><p>CNAME 即相当于告诉 GitHub 允许将 xxx.github.io 为你的域名提供服务。<br>source 目录下的文件除了特殊的 markdown 会被解析为 html，其余都会原样复制到生成的静态文件夹中。<br>所以你需要在 source 文件夹下建有 CNAME，它会在生成静态文件时，将 CNAME 拷贝到静态文件夹并部署到 master 分支。<br>如果只是在 GitHub 上设置（<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Custom domain</code>），它会自动添加到 master 分支上，但随后不包含 CNAME 的部署会将其覆盖。</p></blockquote><p>内容填写你的域名即可。</p><blockquote><p><a href="https://help.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages">About custom domains and GitHub Pages</a></p></blockquote><h3 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h3><p>如果想要使用国内的一些服务，比如 CDN，不备案确实寸步难行。</p><p>此处我指的是 ICP 备案，并非公安备案。（实际上我从来没有进行过公安备案，且目前在使用服务时，并未受到任何相关限制。）</p><blockquote><p>我只在腾讯云备案过，所以只能分享一点此方面的经验。</p></blockquote><p>国内备案往往意味着你还需要一台国内的服务器，譬如通过腾讯云备案时会需要你设置关联的服务器（阿里云应当也是如此）。<br>实际上你的网站并不一定得在这台服务器上，即便你只是免费试用了一个月，但是备案成功了，之后过期了对备案也不会有何影响。</p><blockquote><p>也就是说你完全可以使用学生优惠（10 元左右）购买一个月的云服务器，用于关联，并在这个月内抓紧备案好，此后云服务器过期不会影响备案问题。<br>学生优惠的话 <a href="https://www.aliyun.com/minisite/goods?userCode=ixykjqj2">阿里云</a> 或者 <a href="https://url.cn/PLQYbz6n">腾讯云</a> 都有。</p></blockquote><p>备案前需要注意的几点就是：</p><ul><li>确定你的域名是否可以备案（一些少见/独特的域名后缀，国内是无法备案的，比如 <code>moe</code>）</li><li>关闭评论区</li><li>提交备案时的备注说明不得含有 <code>交流</code> 字样</li><li>首页不能含有其他网站的直达链接</li><li>遵纪守法无不良信息（这是当然的）</li></ul><p>你也可以直接关停网站，等待备案成功后再重新打开。（今后每年偶尔会复查，但相对会宽松许多。）</p><p>此后，按照网站指引的备案步骤一步步来即可。（以前还要等待幕布寄送拍照，现在可以直接在手机上人脸验证）</p><p>备案成功后页脚必须清晰地展示备案号，且备案号含有指向 <a href="http://www.beian.miit.gov.cn/">http://www.beian.miit.gov.cn/</a> 的超链接。</p><h3 id="更多可能有帮助的内容"><a href="#更多可能有帮助的内容" class="headerlink" title="更多可能有帮助的内容"></a>更多可能有帮助的内容</h3><ul><li><a href="https://www.yunyoujun.cn/note/baidu-seo-about-github-pages/">让百度收录你的 GitHub Pages 博客 - 云游君的小站</a></li><li><a href="https://www.yunyoujun.cn/note/use-cdn-speed-up-site/">使用 CDN 加速你的 GitHub Pages 网站 - 云游君的小站</a></li></ul><h3 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h3><p>毕竟自己的站点可能还是不会有什么人看，所以发到其他平台了（然而还是没有人）。不过在<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">这里</a>阅读体验应该是最好的。</p><ul><li><a href="https://zhuanlan.zhihu.com/p/113209647">教你如何从零开始搭建一个属于自己的网站 - 云游君的文章 - 知乎</a></li><li><a href="https://www.bilibili.com/read/cv5108842">教你如何从零开始搭建一个属于自己的网站 - bilibili 专栏</a>（不支持外链、代码高亮、Markdown，太难了）</li><li><a href="https://cloud.tencent.com/developer/article/1609701">教你如何从零开始搭建一个属于自己的网站 - 腾讯云</a>（该说不愧是腾讯吗？SEO 绝了。最晚（晚了几个星期）发的，次日搜全名就变百度第一条了。）</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>个人网站同样可以用来做许多事情，你可以将其用来记录生活、回忆、创作、学习笔记、开发经验等（包括作为一个试验平台）。<br>可以与熟悉的人分享，也可以作为另一个世界另一个自己的展示。</p><p>多年后，回看起自己当初写下的内容，未尝不是件有趣的事情。</p><p>善始者众，善终者寡。</p><blockquote><p>臣闻善作者，不必善成；善始者，不必善终。「史记·乐毅列传」</p></blockquote><p>希望大家能有毅力坚持下去，不忘初心。</p><blockquote><p>永远相信美好的事情即将发生</p></blockquote><p>相关讨论与问题，可前往 <a href="https://github.com/YunYouJun/hexo-theme-yun/discussions/categories/q-a">Discussions</a> 反馈。</p><blockquote><p>主题相关问题请到 <a href="https://github.com/YunYouJun/hexo-theme-yun/issues">Issues ｜ hexo-theme-yun</a> 反馈。</p></blockquote><hr><p>Q.E.D.</p>]]></content>
      
      
      <categories>
          
          <category> 初意的小安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 分享 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从来如此</title>
      <link href="/posts/always-like-this/"/>
      <url>/posts/always-like-this/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无趣的草率之作</p></blockquote><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><p>奶奶病了，是吃人的病。</p><p>今夜，云依旧挨得紧密，让人看不到月光。</p><p>家里空荡荡得像个牢房，静谧无声，唯似有如耳鸣般的微弱电流声让我得以确认自己的存在。我期待着能在家中翻找出些值钱的东西，奶奶视若珍宝的匣子也被我打开，里面存放的是老式的平板电脑。对于独特爱好的古董收藏家，也许还能值上些钱。</p><p>我尝试着将其打开，密码的确是我的生日，桌面则装着寥寥可数的应用。其名字也在告诉我这大概是奶奶记日记的地方，想来如今应当不会再有何大用。出于好奇，我还是悄悄地点开看了起来。时间分门别类，从往至今，让我不由得为奶奶的毅力惊叹。只是近来，却逐渐减少。</p><p>我将其与依稀的记忆重叠起来，譬如见我远比父亲要惹人怜爱而起的乳名小可，譬如我百日之时早起从寺里祈来的长命锁，又譬如冬天前一针一线亲手为我织的红色围巾，零零散散，琐屑不堪。明明那些影像仍清晰地记在我脑海深处的芯片里，我却一点也不愿回顾。</p><p>我同样记得母亲离世时不甘与期冀的眼神，父亲入狱时遗憾却又无悔的目光。读书，上学，工作，又或是被吃，地上人的生活从来如此。但他们期盼着在我身上的未来能有所改变。</p><p>父亲的罪名是私藏海马芯片，在此之前母亲已怀上我却查出了脑部的肿瘤。治疗手段并非没有，但那是地上之人支付不起且没有资格尝试的。说来也简单，只需切除脑组织，并以芯片代之。而母亲所工作的电解云处理厂拒绝赔偿，加之本身康复可能性便极低，在芯片工厂工作的父亲决定铤而走险。</p><p>本打算我出生后便立即手术，然风声不胫而走，地下诊室中人赃并获，那时我应当哭得意外大声。母亲此后不久，亦含恨离世，只留我和奶奶相依为命。奶奶拼尽一切，将我抚养长大，因为只有我也许能够改变这个家未来的命运。</p><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><p>这是知识就是金钱的时代。父亲当年偷出的芯片其实有两枚，一枚是可以完全存储记忆并替代大脑的甲型，另一枚则是辅助增强记忆的乙型。在搜查之前，乙型便已悄然植入了我的脑中，因此未被发现。</p><p>地上人拼其一生所掌握的知识也与天人们有着天壤之别，且此后往往不得不因生活所迫出售掉那些不能立即赚得钱的知识。正如马太福音第二十五章所言，凡有的，还要加给他叫他多余。没有的，连他所有的也要夺过来。人与人之间的界线也将愈来愈宽，从来如此。</p><p>但如今有了这枚芯片的我却不然，我得以考上此间最好的大学。这意味着我的知识与记忆往往能卖上更好的价钱，或者根本不用出售。如有机会，甚至可在天上的研究所谋得一官半职，带着奶奶永远地脱离此处。</p><p>只是在生活即将展露出些许光亮时，奶奶病了。是和母亲那时一样长在脑部的肿瘤，却更为接近海马区。它会一天天变大扩散，侵蚀人的记忆，令人神志不清，乃至死不瞑目。人人都知道那多半是电解云的辐射所至，但工厂的应聘者仍旧络绎不绝。这是无可奈何的事情。</p><p>母亲去世时，工厂网开一面允我奶奶顶了母亲的班，生活方得以维系。但如今奶奶生病，积蓄更是所剩无几，我不得不接住院的奶奶回家。</p><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><p>当第一片电解云在空中生成之时，人与人便划清了界限。富者居于深空，贫者佝行于地，这是亘古以来的道理，从来如此。但这究竟从何而起，我不得而知。我们只需要为他们提供源源不断的能源，处理废料生成的电解云，再心怀感激地领取那勉强维持生活的微薄薪水，便天下太平。</p><p>可以继续治疗吗？钱我会慢慢凑齐的。我不断乞求着医生。</p><p>这是规定，从来如此。医生摇了摇头，又叹了口气，转身离开了。</p><p>病房里躺在床上的奶奶，已憔悴得与我记忆中的模样相去甚远。我握住奶奶机械的手，不敢抬头直视她的眼睛。满是划痕的机械手臂映着天花板的光，是工作时受的伤。为了交齐我大学的学费，奶奶卖掉了她书本声乐的知识与礼教。奶奶为我牺牲了太多太多，我却只能说出这样的话。</p><p>奶奶，家里已经没有钱了。要不我接您回家吧？</p><p>是让我回家等死！？</p><p>奶奶的眼睛突然瞪若铜铃，向我怒斥，全然不见往日知书达礼的气度。</p><p>不是……只是……</p><p>虽然我想狡辩，但却找不出丝毫理由来。</p><p>你以为是谁供你长到现在，没钱，那就拿你的身体去换钱啊。</p><p>我记忆中的奶奶是不会说出这种话的人。所有卖过记忆的人都会性情大变，液体将海马区充满，将相关的信息素黏附而出，那些深藏记忆中潜移默化铸就人格的点点滴滴则逐渐消失得无影无踪。复刻出的记忆便存储在这液体之中，这些记忆将在黑市中几经辗转，到达上层人的手中。而他们只需解析出其内容，存入自己的芯片，便可轻而易举地掌握他人或许花费数年方能熟练的技艺。电解后的液体则化作雾气飘散空中，它们不断上升，凝聚成团，最终成为永不消散的电解云。</p><h3 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h3><p>我走过狭长幽暗的阶梯，来到此处。大门紧闭，门外却放着面洁净的落地镜。</p><p>奶奶之所以记日记，也许就是害怕自己会说出那般伤人的话。但那却也有理，黑市里最值钱的东西除了带着学识的记忆，还有年轻貌美的躯体。我照了照眼前的镜子，也许的确能卖个好价钱。这面镜子大概正是为所有来此的人而准备，以便其留恋下自己最后的身影。</p><p>我打听得奶奶那份记忆暂时还未售出，若是将自己的身躯卖出，不光治疗的手术费能凑齐，还能再买回奶奶的记忆。</p><p>我敲了敲紧闭的门。</p><p>来了？低沉的声音从中传出。</p><p>来了。我答道。</p><h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3><p>买得这副身躯时，里面的记忆竟未清除干净。我不由得窥探起部分，再此后却无下文。也许少女已委身于机械之躯中，并带着钱补齐了手术费，继续与奶奶相依为命。却也有可能被黑吃黑，就此消失于夜色中。但这都与我无关，我所在乎的只是这件收藏品是否足够美丽。</p><p>朱门酒肉臭，路有冻死骨。脑内的芯片飞速运转，为我挑选了句应景的诗。我的智慧与财富，正是父亲留给我的遗产。而我则将继续发扬光大。</p><p>我正欲继续沉浸于收藏品们的美丽之中时，与监控相连接的芯片告诉我似有客人来访。</p><p>“左等右等，可算将您盼至。”我径直邀其进入我最为自豪的收藏室，从单向的透明玻璃墙向下看去是变换莫测壮阔无比的电解云。此番美景，又有多少人能见得。</p><p>所来之人是享誉天上地下的设计师裁，正如其名，他最擅长的便是剪裁之术。但这所指的并非衣物，而是生物。他的创意别出心裁，疯狂大胆，令人惊叹。我昔日重金购得的宠物犬八，由八种精心挑选的狗的身体与记忆拼合而成，便出自他之手。藏獒的勇猛，牧羊犬的聪慧，田园犬的忠诚……总之我很是满意。</p><p>他既拥有此等天赋本可移居天上，却不知为何，始终在地上居住。这大概便是艺术家独有的偏执，我也不便多问。为了请他前来，我允诺为其提供重塑亡妻躯体的资源方才得愿。</p><p>“所以需要我做什么？”他发问道，被刘海遮住的半边脸带着阴柔的气息。有传言，称其疯狂到将亡妻的身体缝合到自己的身上，看来绝非杜撰。</p><p>“听得阁下技艺鬼斧神工，今日便想劳烦阁下打造一具举世无双的艺术品。”我在脑内传达了指令，周围众多的圆柱型遮罩缓缓打开，展露出我的收藏。“此处之物可任您取用。”</p><p>排列的罐中俨然是一具具曼妙少女的躯体。</p><p>“你不怕遭天谴么？”他突然说道。</p><p>“我们本便是天上之人，有何可惧。”我蹲下身来，摸了摸身边的爱犬。“再说也算彼此彼此吧。”</p><p>他不再言语，打了个数字八的手势。</p><p>刹那间，八张开血盆大口咬住了我的臂膀，裁的指尖也放出火光，准确地命中我心脏所在之处。</p><h3 id="六、"><a href="#六、" class="headerlink" title="六、"></a>六、</h3><p>“想必策划很久了吧？”凭借过去购来的格斗技巧，我一手锁住裁的关节，一手捏着脖子将其提起，肩膀上仍旧挂着我的爱犬。咬合的力道似乎仍在加剧，但对我毫无影响。被击穿的身体也并无血液流出，内部运转的是密密麻麻的机械零件。</p><p>隐藏在八身上的训练记忆，缝于手指中的袖珍枪，绝非一日之功。</p><p>“是谁派你来的？为什么要杀我？”我笑问道，无非是螳臂当车。</p><p>“是天。为什么你们居于天上，而他们就要在云下的土地苟延残喘？为什么你们可以肆意更换躯体填充记忆，而他们就要出卖自己为你们处理那些废料？为什么你们吃人，他们就要被吃？”因为我手上力道的加重，他剧烈咳嗽起来，我偏过头躲开他喷出的鲜血。</p><p>“弱肉强食，从来如此。”</p><p>“从来如此，便对么？”他怒喝道。</p><p>我笑了出来。“不对又如何？你并非第一个来杀我之人，也不会是最后一个。”</p><p>“自我亡妻死于你那电解云工厂，我便没想过继续苟活下去。”他竟与我对笑起来。</p><p>为以防万一，我提前捏断了他的颈椎，他凝固的表情似要再说些什么。不过最令我有些恼怒的是，我梦想的艺术品未能完成。好在托此我可以有正当防卫的理由，获取他的记忆亲力亲为。</p><p>在我欲打开他的大脑一探究竟时，热浪扑面而来。</p><h3 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h3><p>我从收藏室的长眠中醒来，身上还滴着罐中的液体。不远处则是滩模糊的血肉与熔化的铁水，那疯子竟将微型炸弹也缝进了脑内，故这自然是裁先生与我的。或者说是父亲的，正如忒修斯之船，记忆的载体与身体都更换完毕后，我还是我吗？我偶尔也会思考，但无论如何，我将继承下父亲的智慧与财富，并继续发扬光大。</p><p>玻璃墙外的电解云已变换了形状，被夕阳照的金光万丈。</p><p>富者永继，贫者交替，生生不息，从来如此。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>离某截稿之日还有两天，本想就此放弃，但结合至今机遇的惨痛经验，便又决心一试。便有了此作。既所幸又只取得了三等奖。<br>此时的我，诸事不顺，常常思索是否是人世不公早就此番境地。当然虽可能由此原因，但终究却还是在于自己。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 初意的小小说 </category>
          
          <category> 小短篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> 小说 </tag>
            
            <tag> 科幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 静态博客搭建笔记</title>
      <link href="/note/hexo-build-note/"/>
      <url>/note/hexo-build-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Wordpress 你放心，我暂时是不会抛弃你的。<br>2017.12.11 正式抛弃 2333</p></blockquote><hr><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p><a href="https://hexo.io/">Hexo</a>：快速、简洁且高效的博客框架</p><span id="more"></span><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>多语言文档（含中文）</li><li>静态博客，无需服务器</li><li>部署、迁移、备份方便</li><li>Geek</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>跟随文档步骤即可：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h2><ul><li><a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun</a>：</li><li><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>：应该是最出名的 Hexo 主题</li></ul><hr><h2 id="一些解决方案"><a href="#一些解决方案" class="headerlink" title="一些解决方案"></a>一些解决方案</h2><h3 id="备份自己的-Hexo-源文件"><a href="#备份自己的-Hexo-源文件" class="headerlink" title="备份自己的 Hexo 源文件"></a>备份自己的 Hexo 源文件</h3><ul><li>在本地的 GitHub Pages 的项目(xxx.github.io)中,通过 <code>git bash</code> 建立新的分支 hexo<br>(可以现在 GitHub 上新建再 clone 自自己的文件夹)</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b hexo</code></pre><ul><li><code>git checkout hexo</code> 切换至 hexo 分支</li><li>此后对 hexo 源文件的配置修改等操作，默认在此分支下操作即可</li><li>将修改推送至远程分支</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> -A<span class="token function">git</span> commit -m <span class="token string">'update hexo backup'</span><span class="token function">git</span> push origin hexo</code></pre><h3 id="每次命令执行繁琐，使用批处理"><a href="#每次命令执行繁琐，使用批处理" class="headerlink" title="每次命令执行繁琐，使用批处理"></a>每次命令执行繁琐，使用批处理</h3><ul><li>在 Hexo 根目录下新建批处理文件 <code>update.sh</code>,并编辑如下内容。</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment"># 清除缓存</span>hexo d -g <span class="token comment"># 重新部署 Hexo</span><span class="token function">git</span> <span class="token function">add</span> -A<span class="token function">git</span> commit -m <span class="token string">'update hexo backup'</span><span class="token function">git</span> push origin hexo <span class="token comment"># 备份 Hexo 源文件</span></code></pre><ul><li>在 Hexo 根目录下，通过如下命令执行。</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">./update.sh</code></pre><h3 id="集成-Algolia-搜索插件"><a href="#集成-Algolia-搜索插件" class="headerlink" title="集成 Algolia 搜索插件"></a><a href="https://www.npmjs.com/package/hexo-algolia">集成 Algolia 搜索插件</a></h3><h4 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a><a href="https://www.algolia.com/">Algolia</a></h4><p>The Most Reliable Platform for Building Search.</p><p>在 hexo 的 <code>_config.yml</code> 文件中，添加 algolia 配置。（注释记得去掉）</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">algolia</span><span class="token punctuation">:</span>  <span class="token key atrule">applicationID</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span>  <span class="token key atrule">apiKey</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span>  <span class="token key atrule">indexName</span><span class="token punctuation">:</span> 'my<span class="token punctuation">-</span>hexo<span class="token punctuation">-</span>blog' // 填写在 aloglia 中设置的名称  <span class="token key atrule">chunkSize</span><span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token key atrule">fields</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> excerpt    <span class="token punctuation">-</span> excerpt<span class="token punctuation">:</span>strip    <span class="token punctuation">-</span> gallery    <span class="token punctuation">-</span> permalink    <span class="token punctuation">-</span> photos    <span class="token punctuation">-</span> slug    <span class="token punctuation">-</span> tags    <span class="token punctuation">-</span> title</code></pre><pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-algolia --save &#x2F;&#x2F; 使用 npm 安装 hexo-algolia 插件export HEXO_ALGOLIA_INDEXING_KEY&#x3D;xxx &#x2F;&#x2F; xxx 为 apiKeyhexo cleanhexo algolia &#x2F;&#x2F; 生成index</code></pre><h3 id="为-Next-主题添加阅读次数统计"><a href="#为-Next-主题添加阅读次数统计" class="headerlink" title="为 Next 主题添加阅读次数统计"></a>为 Next 主题添加阅读次数统计</h3><p><a href="http://leancloud.cn/"><strong>LeanCloud</strong></a><br>采用第三方 LeanCloud 服务实现</p><p><a href="http://theme-next.iissnan.com/">Next</a> 主题集成了 LeanCloud 统计。</p><ul><li>进入官网，注册账号，创建应用（开发版为免费使用）</li><li>进入创建的应用中，选择左侧导航栏中的“存储”，随后点击“创建 Class”，将 Class 名称填为 Counter，并选择<strong>无限制</strong>选项。</li><li>进入 Next 主题配置文件 <code>_config.yml</code> ，配置 <code>leancloud_visitors</code> 属性 <code>enable</code> 为 <code>true</code>，并配置对应的 <code>App ID</code> 与 <code>App Key</code> 。 (在 <code>LeanCloud</code> 左侧导航栏的设置界面，单击“应用 Key”可以看到应用的 App ID 和 App Key。)</li></ul><hr><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="配置-theme-next"><a href="#配置-theme-next" class="headerlink" title="配置 theme/next"></a>配置 theme/next</h3><p>可以在 <code>source</code> 文件夹(含有 <code>_post</code> 的文件夹)下新建 <code>_data</code> 文件夹，并在其中新建 <code>next.yml</code>。其后将需要特定的配置从 <code>theme/next/_config.yml</code> 中复制过来即可。</p><p>如果需要覆盖 <code>_config.yml</code> 默认配置， 修改 <code>next.yml</code> 中 <code>override: true</code>。</p><h3 id="自动生成目录"><a href="#自动生成目录" class="headerlink" title="自动生成目录"></a>自动生成目录</h3><p>开启 toc (Table of Contents)，</p><pre class="language-md" data-language="md"><code class="language-md">---title: xxxtoc: true---...</code></pre><p>也可以在设置 <code>next.yml</code>中设置默认开启。</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Table Of Contents in the Sidebar</span><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>在 <a href="https://yunyoujun.github.io/">GitHub Pages</a> 和 <a href="https://yunyoujun.coding.me/">Coding Pages</a> 上都进行了部署。</p><p><code>_config.yml</code> 可参考 <a href="https://github.com/YunYouJun/yunyoujun.github.io">GitHub Address</a></p>]]></content>
      
      
      <categories>
          
          <category> 初意的小笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 使用笔记</title>
      <link href="/note/laravel-use-note/"/>
      <url>/note/laravel-use-note/</url>
      
        <content type="html"><![CDATA[<p>Laravel 框架使用过程中的一些笔记。</p><span id="more"></span><h2 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a>线上部署</h2><h3 id="相关过程"><a href="#相关过程" class="headerlink" title="相关过程"></a>相关过程</h3><ol><li><a href="/note/lnmp-install/">LNMP 一键安装包</a></li><li><a href="/note/a-trap-about-laravel-deploy/">记 LNMP 一键安装后 Laravel 线上部署的坑</a></li></ol><hr><h3 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h3><h4 id="安装-composer"><a href="#安装-composer" class="headerlink" title="安装 composer"></a>安装 composer</h4><ul><li><a href="https://getcomposer.org/">Composer 官网</a></li><li><a href="https://developer.aliyun.com/composer">阿里云 Composer 全量镜像</a></li></ul><h4 id="git-部署"><a href="#git-部署" class="headerlink" title="git 部署"></a>git 部署</h4><ul><li>安装 git，<code>$ sudo apt install git</code>。</li><li>创建 ssh-key，<code>$ ssh-keygen -t rsa -C &quot;邮箱&quot;</code>,一路回车。</li><li><code>$ cat ~/.ssh/id_rsa.pub</code> 复制公钥到 github 上。添加 ssh key。</li><li><code>$ cd /home/wwwroot</code> 到放置项目代码的文件夹</li><li><code>$ git clone git@github.com:用户名/项目名.git</code>，从 github 获取线上代码。</li><li><code>$ cp .env.example .env</code> 对.env 文件并进行配置。（app_key,database,mail 等）</li><li><code>$ composer install</code> 安装相关包</li><li><code>$ php artisan migrate</code> 安装数据库迁移</li></ul><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="数据库字符长度过长"><a href="#数据库字符长度过长" class="headerlink" title="数据库字符长度过长"></a>数据库字符长度过长</h3><p>参见 <a href="https://segmentfault.com/a/1190000008416200">Laravel 5.4 migrate 时报错: Specified key was too long error</a></p><pre class="language-sh" data-language="sh"><code class="language-sh">1071 Specified key was too long; max key length is 767 bytes</code></pre><p>MySql 支持的 utf8 编码最大字符长度为 3 字节，如果遇到 4 字节的宽字符就会出现插入异常。三个字节 UTF-8 最大能编码的 Unicode 字符是 0xffff ，即 Unicode 中的基本多文种平面（BMP）。因而包括 Emoji 表情（Emoji 是一种特殊的 Unicode 编码）在内的非基本多文种平面的 Unicode 字符都无法使用 MySql 的 utf8 字符集存储。</p><p>这也应该就是 Laravel 5.4 改用 4 字节长度的 utf8mb4 字符编码的原因之一。不过要注意的是，只有 MySql 5.5.3 版本以后才开始支持 utf8mb4 字符编码（查看版本：selection version();）。如果 MySql 版本过低，需要进行版本更新。</p><h4 id="解决方案（二选一）"><a href="#解决方案（二选一）" class="headerlink" title="解决方案（二选一）"></a>解决方案（二选一）</h4><ol><li>升级 MySql 版本到 5.5.3 以上。</li><li>手动配置迁移命令 migrate 生成的默认字符串长度，在 <code>app\Providers\AppServiceProders</code> 中调用 <code>Schema::defaultStringLength</code> 方法来实现配置：</li></ol><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>Schema</span><span class="token punctuation">;</span><span class="token comment">/*** Bootstrap any application services.** @return void*/</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">defaultStringLength</span><span class="token punctuation">(</span><span class="token number">191</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="停止维护时间戳"><a href="#停止维护时间戳" class="headerlink" title="停止维护时间戳"></a>停止维护时间戳</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Xxx</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token variable">$timestamps</span><span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="模版插件"><a href="#模版插件" class="headerlink" title="模版插件"></a>模版插件</h2><h3 id="Laravel-admin"><a href="#Laravel-admin" class="headerlink" title="Laravel-admin"></a>Laravel-admin</h3><ul><li>GitHub: <a href="https://github.com/z-song/laravel-admin">https://github.com/z-song/laravel-admin</a></li><li>中文文档： <a href="http://laravel-admin.org/docs/#/zh/">http://laravel-admin.org/docs/#/zh/</a></li><li>官网：<a href="http://laravel-admin.org/">http://laravel-admin.org</a></li><li>Demo: <a href="http://laravel-admin.org/demo/auth/login">http://laravel-admin.org/demo/auth/login</a></li></ul><p>To Be Continued.</p>]]></content>
      
      
      <categories>
          
          <category> 初意的小笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress 的实用插件与主题推荐</title>
      <link href="/share/wordpress-plugins-themes/"/>
      <url>/share/wordpress-plugins-themes/</url>
      
        <content type="html"><![CDATA[<p>自己使用的一些关于 Wordpress 的插件与主题推荐。（以前爱折腾这些，现在已经转投 <a href="https://hexo.io/">Hexo</a> 啦。）</p><span id="more"></span><h2 id="Plug-ins"><a href="#Plug-ins" class="headerlink" title="Plug-ins"></a>Plug-ins</h2><h3 id="Akismet-Anti-Spam"><a href="#Akismet-Anti-Spam" class="headerlink" title="Akismet Anti-Spam"></a>Akismet Anti-Spam</h3><p>由 <a href="http://automattic.com/wordpress-plugins/">Automattic</a></p><blockquote><p>Description</p></blockquote><p>由千百万人使用，Akismet 可能是保护您的站点免受垃圾评论的世界上最好的方式。 您的站点已完全配置并受到不断的保护。</p><blockquote><p>Reason</p></blockquote><p>当初我是关闭掉的，但是某天上线的时候收到了好几条评论，还有点小激动。可是打开一看，却全都是乱七八糟的垃圾评论。（<del>我裤子都脱了你就给我看这个！</del>）后来就开开来了，不知道到底有没有用，不过的确到现在没再收到过就是了。</p><hr><h3 id="BackUpWordPress"><a href="#BackUpWordPress" class="headerlink" title="BackUpWordPress"></a>BackUpWordPress</h3><p>由 <a href="http://hmn.md/">Human Made Limited</a></p><blockquote><p>Description</p></blockquote><p>Simple automated backups of your WordPress powered website. Find me under Tools → Backups. On multisite, you’ll find me under the Network Settings menu.</p><blockquote><p>Reason</p></blockquote><p>用来在服务器上自动备份 wordpress 的，开着以防万一吧。（<del>大概</del>）</p><hr><h3 id="Bootstrap-3-Shortcodes"><a href="#Bootstrap-3-Shortcodes" class="headerlink" title="Bootstrap 3 Shortcodes"></a>Bootstrap 3 Shortcodes</h3><h4 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a>Desciption</h4><p>The plugin adds a shortcodes for all Bootstrap 3 elements.</p><blockquote><p>Reason</p></blockquote><p>可以在编辑器里，快速添加 bootstrap 的一些样式。</p><hr><h3 id="Disable-Google-Fonts"><a href="#Disable-Google-Fonts" class="headerlink" title="Disable Google Fonts"></a>Disable Google Fonts</h3><p>由 <a href="disablehttp://blog.milandinic.com/">Milan Dinić</a></p><blockquote><p>Description</p></blockquote><p>Disable enqueuing of Open Sans and other fonts used by WordPress from Google.</p><blockquote><p>Reason</p></blockquote><p>此前装了 Jetpack 后，访问页面变得异常缓慢。查了查，发现是因为我国的特殊国情（<del>防火长城</del>）挡住了 Jetpack 访问的一些资源。其中有谷歌字体，于是就下了这个插件禁用。（<del>只是部分原因</del>）</p><hr><h3 id="Jetpack-由-WordPress-com-出品"><a href="#Jetpack-由-WordPress-com-出品" class="headerlink" title="Jetpack 由 WordPress.com 出品"></a>Jetpack 由 WordPress.com 出品</h3><p>由 <a href="https://jetpack.com/">Automattic</a></p><blockquote><p>Description</p></blockquote><p>将 WordPress.com 云的强大功能引入您的自托管 WordPress。Jetpack 使您能够将自己的博客与一个 WordPress.com 帐户连接，以使用一般只有 WordPress.com 用户才可使用的强大功能。</p><blockquote><p>Reason</p></blockquote><p>Jetpack 是个好东西，包含了大部分的所需功能，如果不是因为一些特殊国情，很多功能都可以用到。但实际上却不得不关闭其中一些功能。</p><p>(由于加载速度实在过慢，已将其关闭)</p><hr><h3 id="Menu-Icons"><a href="#Menu-Icons" class="headerlink" title="Menu Icons"></a>Menu Icons</h3><p>由 <a href="http://kucrut.org/">Dzikri Aziz</a></p><blockquote><p>Description</p></blockquote><p>Spice up your navigation menus with pretty icons, easily.</p><blockquote><p>Reason</p></blockquote><p>可以为自己的菜单链接什么的添加适合的小图标，很实用。</p><hr><h3 id="Open-Social"><a href="#Open-Social" class="headerlink" title="Open Social"></a>Open Social</h3><blockquote><p>Description</p></blockquote><p>可用腾讯 QQ、新浪微博、百度、谷歌、微软 LIVE、豆瓣、人人网、开心网、小米、脸书、推特、微信等登录和分享，无第三方平台、无接口文件冗余、带昵称网址头像等。</p><blockquote><p>Reason:</p></blockquote><p>可以提供其他社交平台的接口登录和分享，不过后来觉得自己这种小站根本用不到，就关了。</p><hr><h3 id="Slimstat-Analytics"><a href="#Slimstat-Analytics" class="headerlink" title="Slimstat Analytics"></a>Slimstat Analytics</h3><p>由 <a href="http://www.wp-slimstat.com/">Jason Crouse</a></p><blockquote><p>Description:</p></blockquote><p>The leading web analytics plugin for WordPress.</p><blockquote><p>Reason:</p></blockquote><p>统计站点的一些访问信息，比较全面。（大概每天从这里看到有人访问会很高兴吧。）</p><hr><h3 id="WP-Editor-md"><a href="#WP-Editor-md" class="headerlink" title="WP Editor.md"></a>WP Editor.md</h3><p>由 <a href="https://iiong.com/">淮城一只猫</a></p><blockquote><p>Description</p></blockquote><p>或许这是一个 WordPress 中最好，最完美的 Markdown 编辑器。</p><blockquote><p>Reason</p></blockquote><p>很好用的一个 wordpress 里的 markdown 编辑器。</p><hr><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h2><h3 id="Adams"><a href="#Adams" class="headerlink" title="Adams"></a>Adams</h3><p>由<a href="https://biji.io/">Tokin</a></p><blockquote><p>Reason</p></blockquote><p>简洁</p><hr><h3 id="Flat-Bootstrap"><a href="#Flat-Bootstrap" class="headerlink" title="Flat Bootstrap"></a>Flat Bootstrap</h3><p>由<a href="http://xtremelysocial.com/">XtremelySocial</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 初意的小安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 陷阱</title>
      <link href="/note/css-trap-note/"/>
      <url>/note/css-trap-note/</url>
      
        <content type="html"><![CDATA[<p>CSS 的奇妙 Bug</p><span id="more"></span><!-- for codepen --><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Margin-塌陷"><a href="#Margin-塌陷" class="headerlink" title="Margin 塌陷"></a>Margin 塌陷</h3><p>DEMO: <a href="https://codepen.io/YunYouJun/pen/WqXGpo">Margin Collapse</a></p><p class="codepen" data-height="304" data-theme-id="0" data-default-tab="css,result" data-user="YunYouJun" data-slug-hash="WqXGpo" style="height: 304px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Margin Collapse">  <span>See the Pen <a href="https://codepen.io/YunYouJun/pen/WqXGpo/">  Margin Collapse</a> by YunYouJun (<a href="https://codepen.io/YunYouJun">@YunYouJun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><h4 id="父子间"><a href="#父子间" class="headerlink" title="父子间"></a>父子间</h4><p>添加 <code>overflow: hidden;</code></p><h4 id="兄弟间"><a href="#兄弟间" class="headerlink" title="兄弟间"></a>兄弟间</h4><p>添加 <code>float:left;</code></p><h3 id="transform-后-z-index-属性失效"><a href="#transform-后-z-index-属性失效" class="headerlink" title="transform 后 z-index 属性失效"></a>transform 后 z-index 属性失效</h3><p>Demo:</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="css,result" data-user="YunYouJun" data-slug-hash="PowMQjP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="transform vs z-index">  <span>See the Pen <a href="https://codepen.io/YunYouJun/pen/PowMQjP">  transform vs z-index</a> by YunYouJun (<a href="https://codepen.io/YunYouJun">@YunYouJun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><p>原因主要是 <code>transform</code> 新创建了层叠上下文，影响了正常的 <code>z-index</code>。</p><p><strong>解决方案</strong>：添加 <code>transform-style: preserve-3d;</code>，使之变成 3d 显示方式。再通过 <code>transform: translateZ(-1px);</code> 来控制层级顺序。</p><ul><li><a href="https://link.jianshu.com/?t=http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/">张鑫旭博文：深入理解 css 中的层叠上下文和层叠顺序</a></li><li><a href="https://link.jianshu.com/?t=https://segmentfault.com/q/1010000002480824">Segmentfault 回答：Transform 引起的 z-index “失效”</a></li></ul><h3 id="img-与父级元素下边框存在空隙"><a href="#img-与父级元素下边框存在空隙" class="headerlink" title="img 与父级元素下边框存在空隙"></a>img 与父级元素下边框存在空隙</h3><p>Demo:</p><p class="codepen" data-height="265" data-theme-id="default" data-default-tab="html,result" data-user="YunYouJun" data-slug-hash="dyPxmGY" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="img space with father">  <span>See the Pen <a href="https://codepen.io/YunYouJun/pen/dyPxmGY">  img space with father</a> by YunYouJun (<a href="https://codepen.io/YunYouJun">@YunYouJun</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><p>可以看到在底部，背景的红色透了出来。<br>其主要原因是文字默认的行高所产生的问题。（参见 demo）</p><p><strong>解决方案</strong>：默认的 <code>vertical-align</code> 属性为 <code>baseline</code>，我们只需要为 <code>img</code> 添加 <code>vertical-align: bottom</code> （<code>middle | top | bottom</code> 都可以）。</p><blockquote><p><a href="https://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">CSS 深入理解 vertical-align 和 line-height 的基友关系</a></p></blockquote><hr><p>To Be Continued.</p>]]></content>
      
      
      <categories>
          
          <category> 初意的小笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动画电影】《声之形》观后感</title>
      <link href="/share/the-shape-of-voice/"/>
      <url>/share/the-shape-of-voice/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天下午在家里坐立不安地等成绩，加之身体不大舒服，也不怎么想敲代码。便看了看电视。<br>起初看得是<a href="https://movie.douban.com/subject/26527993/">《哆啦A梦：新·大雄的日本诞生》</a>。</p><p>旧漫画与老剧场版都有看过，所以剧情基本一目了然。每部剧场版里进入冲突前总有一段无忧无虑的半冒险生活，一直是我最喜欢的部分。<br>小时候缠着老爸买帐篷，这里差不多就是源头了。</p><blockquote><p>虚假的历史永远不可能战胜真正的历史</p></blockquote><p>哆啦A梦喊出这句话后，掷出货真价实的石矛击败了来自 23 世纪的反派。</p><span id="more"></span><h2 id="声之形"><a href="#声之形" class="headerlink" title="声之形"></a><a href="https://movie.douban.com/subject/26264454/">声之形</a></h2><p>随后仍旧无所事事地我又看起了《声之形》。</p><blockquote><p>西宫硝子（早见沙织 饰）生来患有听觉障碍，要依靠助听器和外界交流，口语发音也因此格外的古怪。<br>初中时，硝子转入了一所新的学校，特殊的生理缺陷让她成为了班上引人注目的独特存在，她因此收获了坚实的友情，却也遭到了以男生石田将也（入野自由 配音）为首的小团体的孤立和排挤。<br>随着时间的推移，无心或有意的恶作剧渐渐升级，最终演变成为了无法挽回的伤害，硝子永远的消失在了众人的眼前。<br>排挤硝子的事情曝光后，将也成为了下一个被欺负的对象，孤独痛苦的他终于理解了硝子的隐忍和温柔，只是他再也没有机会跟硝子道歉了。<br>一次偶然中，将也同硝子重逢了，命运的齿轮重新开始了转动。<br>剧情简介 - <a href="https://movie.douban.com/subject/26264454/">聲の形</a></p></blockquote><p>《声之形》改编自漫画，在日本紧随《你的名字》后上映，而自己听闻得《声之形》最多的宣传词便是媲美《你的名字》。<br>当然最终豆瓣上所见的评分却令人大失所望，终究没有像君名那般掀起现象级的浪潮。</p><p>校园欺凌事件，对于受害人来说究竟是怎样的存在，我自身并未体验过。<br>托家长是老师的福，基本没有人欺负过我。遇到小打小闹，自己一哭了事，占尽优势。（回想起来真是羞耻啊。）<br>印象里难得抢过我饮料的隔壁班学生，此后受到了老师们连番的严肃批评。当然这一策略，离开小学便不再生效了。<br>总而言之，我无法对此类事件有真实的直接感受。细节与京阿尼的作画自不必说，影片仍旧让我感同身受。如果我是女主的话，绝对做不到那样还能笑对人生了吧。</p><p>看了看豆瓣评论，很多人都表示女主斯德哥尔摩综合症，某些情节不合理，结局狗血。</p><p>是啊，欺凌别人的人可未必会得到应有的惩罚，未必会做出忏悔，未必会察觉到自己在麻烦别人而想过去自杀，被欺凌的人更未必有那么多勇气去面对生活。<br>当年的同学没有那么容易重逢，问题不会那么容易的解决，人与人之间的矛盾没有那么容易化解，石田将也不会那么巧合抓住跃下窗台的硝子的手，也未必能在自己摔下阳台后轻而易举地苏醒。<br>甚至男主女主为对方做的事情，我自认都无法做到。无论缺了哪一个巧合，最终都可能不是现今这个美好的结局。</p><p>世上总有各种各样的事情，但结局往往没那么美好。不过我想，世界也未必总是那么糟糕。（当然也许只是我所知的世界。）</p><p>不管怎么说，它始终让我感动到了。只要能打动人心的电影，在我心中便是一部好电影。这是我的评价标准。<br>电影本来就是人所创造出来的，想要阐述什么，并拥有各种各样戏剧巧合的东西。<br>而其最终目的不也就是娱乐大众，又或是试图发人深省么。</p><p>男主和女主都有过怕给人添麻烦而想去自杀，不过也许这种举动本身就会给身边人添麻烦了。<br>爸妈也经常在家看到有人自杀的新闻时，就反复说，这些人好傻啊，好好的生命就这样浪费掉了。<br>有时候，自己也会瞎想些看似高深的问题，怎样是活着呢？依靠人与人的联系，生命一代代更迭下去。<br>就像《哆啦A梦：新·大雄的日本诞生》里那样，人类就此繁衍壮大。</p><p>但到底为了什么呢？也许是没有经历过绝境，并没有对死亡的畏惧。<br>至今也只是不想不明不白地随随便便死去罢了。</p><p>《声之形》中的奶奶，让女主的妹妹结弦多考虑考虑自己而不是姐姐，而在结弦的反驳下，奶奶却说自己是为了自己才学的手语。<br>虽然镜头一切，奶奶便去世了。结弦也有对男主说过，你如果只是为了自己心里好受的话，就赶紧回去吧。<br>每个人都在为了自己，帮助别人，只是因为看到别人开心，自己也会很开心啊。</p><p>所以，我大概一直是为了自己活着。</p><p>为了自己每天能开心而努力活着，为了能看到父母开心而自己开心地活着，为了各种各样人与人的联系而活着。</p><p>曾经我以为自己是个能安于孤独的人，当一个死宅只要有网就好了。<br>但后来想到，网络本来不就是人与人联系的象征吗？没有了人，各式各样的论坛、社区毫无意义。<br>各种影音文化也是其他人创造出来，想要传达自己的某个想法的东西。<br>网上群聊得火热，和认识的人却说不上聊天记录一半的字数。</p><p>死宅和现充，不过是将自己喜好的联系从一个极端移到另一个极端。</p><p>失去了人与人的联系，无论对于死宅还是现充，世界都了然无趣。</p><p>等到日后，与我相联系的事物逐渐减少，自己也难以照顾自己的时候，我应该会理所应当地选择安乐死吧。<br>为了到最后一刻，都能因为没有给别人添麻烦而开心地死去。<br>当然在此之前，都要为了自己而一直活下去。</p><blockquote><p>因为这就是人生啊。（<del>又来了，这种没有用的感慨</del>）</p></blockquote><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>直到 2020 年 2 月 3 日 23:09 ，成绩也仍旧没有出来。但心情早已平静了下来。<br>毕竟就算很糟糕，自己也要活下去啊（<del>笑</del>）。</p>]]></content>
      
      
      <categories>
          
          <category> 初意的小安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 中传 </tag>
            
            <tag> 动画 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导出「你的日记」与导入「一本日记」</title>
      <link href="/note/export-nideriji-and-import-1diary/"/>
      <url>/note/export-nideriji-and-import-1diary/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>因为「你的日记」开发不是很活跃，且经常出现无法连接等 BUG，而本身也未提供导出功能，所以我写了该<a href="https://github.com/YunYouJun/export-nideriji/archive/master.zip">工具</a>用于迁移至其他日记软件。<br>此外因为我之后选择的是「一本日记」，所以也可以转换为「一本日记」的数据格式用于导入。<br>我自己也已经成功迁移，所以该项目不会再维护，但如果你也有此需要，希望能对你有所帮助。</p></blockquote><p>GitHub: <a href="https://github.com/YunYouJun/export-nideriji">export-nideriji</a></p><p>具体使用方法见项目地址 README。</p><p>原本我是想记录下整个导出思路的具体过程，然后跑去写脚本，打算写好再把文章补完，自己用完就咕咕咕了。</p><p>所以这里大概只是一半的内容，阁下需要的话直接使用即可，文章应该也就此不会再更新了，</p><p>差不多 2019 年 2 月便干了这事，今天终于决定彻底卸载。</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先，下载免费的抓包工具 <a href="https://www.telerik.com/fiddler">fiddler</a> 与请求调试工具 <a href="https://www.getpostman.com/">Postman</a>。</p><h3 id="Fiddle-配置"><a href="#Fiddle-配置" class="headerlink" title="Fiddle 配置"></a>Fiddle 配置</h3><p><code>Tools &gt; Options...</code></p><p>跳出弹框</p><p><code>HTTPS</code> 面板</p><p>可见默认端口为 <code>8888</code> (可自定义)</p><ul><li><input checked="" disabled="" type="checkbox"> Decrypt HTTPS trafic</li></ul><p>一路同意，出现新选项</p><ul><li><input checked="" disabled="" type="checkbox"> Ignore server certificate errors (unsafe)</li></ul><p>点击 OK, 重启。</p><h3 id="PC-配置"><a href="#PC-配置" class="headerlink" title="PC 配置"></a>PC 配置</h3><p>进入 <code>Windows</code> 命令行， 输入命令，查看本机 IP 地址 (IPv4 地址)</p><pre class="language-sh" data-language="sh"><code class="language-sh">ipconfig</code></pre><pre class="language-sh" data-language="sh"><code class="language-sh">无线局域网适配器 WLAN:   连接特定的 DNS 后缀 . . . . . . . :   本地链接 IPv6 地址. . . . . . . . : fe80::9cb2:89dc:46d1:52c7%19   IPv4 地址 . . . . . . . . . . . . : 192.168.31.87   子网掩码  . . . . . . . . . . . . : 255.255.255.0   默认网关. . . . . . . . . . . . . : 192.168.31.1</code></pre><h3 id="手机配置"><a href="#手机配置" class="headerlink" title="手机配置"></a>手机配置</h3><p>进入已连接的局域网 <code>WIFI</code> 设置手动代理</p><p>主机名为方才查看到的 <code>IPv4</code> 地址 <code>192.168.31.87</code> (因人而异) ，端口为方才默认的 <code>8888</code></p><p><img src="https://cos.yunyoujun.cn/blog/posts/use-fiddle-export-your-diary-1.png" alt="config-phone" loading="lazy"></p><p>可手机直接访问 IPv4:端口号(例如：<code>192.168.31.87:8888</code>) ，如有返回页面则说明设置成功。</p><h3 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h3><p>打开应用，操作刷新。</p><p>观察排除点一些系统的请求，fiddle 界面中含有一条这样的链接。</p><pre class="language-sh" data-language="sh"><code class="language-sh">CONNECT http:&#x2F;&#x2F;ohshenghuo.com:443200 Connection Established ()</code></pre><p>访问地址后，我发现使用 <code>你的日记</code> 的账号密码便可直接登录。</p><p>注销回到登录界面，<code>F12</code> 进入谷歌浏览器控制面板进行调试。</p><p><code>Sources</code> 面板中有网站的静态资源，其中 js 可以直接看出使用了 JQuery ，没有进行混淆压缩，可以直接分析代码。</p><p>其中与登录表单相关的部分代码</p><pre class="language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login/"</span><span class="token punctuation">,</span> form<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    OhUtil<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#login-form .msg_error"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"邮箱或密码输入错误"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#login-form .submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"inactive"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由此可见登录 api 为 <code>api/login</code></p><p>表单内容进行 <a href="https://api.jquery.com/serialize/#serialize"><code>serialize</code></a> (jQuery 方法，序列化)</p><table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>csrfmiddlewaretoken</td><td>-</td></tr><tr><td>email</td><td>-</td></tr><tr><td>password</td><td>-</td></tr></tbody></table><pre class="language-text" data-language="text"><code class="language-text">csrfmiddlewaretoken=ZcJkWtMdfyjBNKxp3ms0i8REkTJcSKw4&amp;email=xxx&amp;password=xxx</code></pre><p>表单还含有 csrfmiddlewaretoken （可以在 html 页面中的登录表单看到,如下），用来防止跨站请求伪造。（也就是防止我们使用 Postman，但是我们可以手动加入表单）</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrfmiddlewaretoken<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ZcJkWtMdfyjBNKxp3ms0i8REkTJcSKw4<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><code>Network</code> 面板可查看到请求头内容和表单数据等。（csrfmiddlewaretoken 也可在此处的 Form data 中看到）</p><p>接下来使用 <a href="https://www.getpostman.com/">Postman</a> 进行 API 调试。</p><p>便可成功获取到 token 等相关信息。</p><p>可继续尝试使用拉取日记等信息，不再赘述。</p><h3 id="《你的日记》-API-整理"><a href="#《你的日记》-API-整理" class="headerlink" title="《你的日记》 API 整理"></a>《你的日记》 API 整理</h3><p>API Address: <a href="https://ohshenghuo.com/api/">https://ohshenghuo.com/api/</a></p><p><a href="https://documenter.getpostman.com/view/3326320/Rztmr8pE">你的日记 API DOC - Postman</a></p><pre class="language-sh" data-language="sh"><code class="language-sh">GET</code></pre><h4 id="Get-Diary"><a href="#Get-Diary" class="headerlink" title="Get Diary"></a>Get Diary</h4><h5 id="Get-Diary-By-Id"><a href="#Get-Diary-By-Id" class="headerlink" title="Get Diary By Id"></a>Get Diary By Id</h5><pre class="language-url" data-language="url"><code class="language-url">GET diary&#x2F;:diaryId</code></pre><p>Example</p><pre class="language-url" data-language="url"><code class="language-url">diary&#x2F;8808906&#x2F;</code></pre><p>Response</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"3bf998217a5b712eb4d5e3f7a9baf87f"</span><span class="token punctuation">,</span>  <span class="token property">"diary"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"deleteddate"</span><span class="token operator">:</span> <span class="token string">"None"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token property">"mood"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">" 少女生活小百科"</span><span class="token punctuation">,</span>    <span class="token property">"space"</span><span class="token operator">:</span> <span class="token string">"boy"</span><span class="token punctuation">,</span>    <span class="token property">"ts"</span><span class="token operator">:</span> <span class="token string">"2018-12-22 10:14:52+00:00"</span><span class="token punctuation">,</span>    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>    <span class="token property">"date_word"</span><span class="token operator">:</span> <span class="token string">"40天前"</span><span class="token punctuation">,</span>    <span class="token property">"weather"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"177636"</span><span class="token punctuation">,</span>    <span class="token property">"createddate"</span><span class="token operator">:</span> <span class="token string">"2018-12-22"</span><span class="token punctuation">,</span>    <span class="token property">"createdtime"</span><span class="token operator">:</span> <span class="token string">"2018-12-22 10:14:52+00:00"</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"8808906"</span><span class="token punctuation">,</span>    <span class="token property">"weekday"</span><span class="token operator">:</span> <span class="token string">"星期六"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"error"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span></code></pre><h5 id="Get-Diary-By-Month"><a href="#Get-Diary-By-Month" class="headerlink" title="Get Diary By Month"></a>Get Diary By Month</h5><pre class="language-url" data-language="url"><code class="language-url">GET diary&#x2F;simple_by_month&#x2F;:year&#x2F;:month&#x2F;</code></pre><p>Example</p><pre class="language-url" data-language="url"><code class="language-url">diary&#x2F;simple_by_month&#x2F;2019&#x2F;1&#x2F;</code></pre><p>Response</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"845d9a3c64d93623e05e2ab7735c2804"</span><span class="token punctuation">,</span>  <span class="token property">"diaries"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"2019-01-29"</span><span class="token operator">:</span> <span class="token number">9329359</span><span class="token punctuation">,</span>    <span class="token property">"2019-01-02"</span><span class="token operator">:</span> <span class="token number">8974069</span><span class="token punctuation">,</span>    <span class="token property">"2019-01-01"</span><span class="token operator">:</span> <span class="token number">8966164</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"error"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span></code></pre><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td>diaries</td><td>包含当月各天日记的 ID</td><td>Object</td><td>-</td></tr><tr><td>yyyy-MM-dd</td><td>当月日记 ID</td><td>Number</td><td>-</td></tr></tbody></table><p>…</p><p>过程咕咕咕了，你可以直接用我写好的脚本工具 <a href="https://github.com/YunYouJun/export-nideriji">export-nideriji</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 初意的小笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【分享】网页背景效果插件 Canvas-Nest.js</title>
      <link href="/share/html5-canvas-nest-js/"/>
      <url>/share/html5-canvas-nest-js/</url>
      
        <content type="html"><![CDATA[<p>一个基于 HTML5 Canvas 绘制的网页背景效果。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/hustcc/canvas-nest.js">canvas-nest.js</a></p><span id="more"></span><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><p>使用 <a href="https://www.jsdelivr.com/">jsDelivr</a> 提供的免费 CDN 服务。</p><p>将下面的代码插入到 <code>&lt;body&gt;</code> 和 <code>&lt;/body&gt;</code> 标签之间</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script  type<span class="token operator">=</span><span class="token string">"text/javascript"</span>  src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/canvas-nest.js/dist/canvas-nest.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h3><ul><li><strong><code>color</code></strong> : 线条颜色, 默认: <code>&#39;0,0,0&#39;</code>；三个数字分别为(R,G,B)，注意用 <code>,</code> 分割</li><li><strong><code>pointColor</code></strong>: 点颜色, 默认：<code>&#39;0,0,0&#39;</code>; RGB 格式.（注意：使用 <code>,</code> 分割）</li><li><strong><code>opacity</code></strong> : 线条透明度（0~1）, 默认: <code>0.5</code></li><li><strong><code>count</code></strong> : 线条的总数量, 默认: <code>99</code></li><li><strong><code>zIndex</code></strong> : 背景的 <code>z-index</code> 属性，css 属性用于控制所在层的位置, 默认: <code>-1</code></li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script  type<span class="token operator">=</span><span class="token string">"text/javascript"</span>  color<span class="token operator">=</span><span class="token string">"0,0,255"</span>  pointColor<span class="token operator">=</span><span class="token string">"0,0,255"</span>  opacity<span class="token operator">=</span><span class="token string">"0.7"</span>  zIndex<span class="token operator">=</span><span class="token string">"2"</span>  count<span class="token operator">=</span><span class="token string">"66"</span>  src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/canvas-nest.js/dist/canvas-nest.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><blockquote><p>效果就如本页面所示！</p></blockquote><script type="text/javascript" color="0,0,255" pointColor="0,0,255" opacity='0.7' zIndex="2" count="66" src="https://cdn.jsdelivr.net/npm/canvas-nest.js/dist/canvas-nest.js"></script>]]></content>
      
      
      <categories>
          
          <category> 初意的小安利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
